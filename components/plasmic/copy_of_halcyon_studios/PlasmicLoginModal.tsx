// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2p9VhVhxAWhB5Nusx9QUQ2
// Component: OGdyRBmo77lT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LoginFormPopup from "../../LoginFormPopup"; // plasmic-import: QZYU2P-IDkxx/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2p9VhVhxAWhB5Nusx9QUQ2/projectcss
import sty from "./PlasmicLoginModal.module.css"; // plasmic-import: OGdyRBmo77lT/css

createPlasmicElementProxy;

export type PlasmicLoginModal__VariantMembers = {};
export type PlasmicLoginModal__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoginModal__VariantsArgs;
export const PlasmicLoginModal__VariantProps = new Array<VariantPropType>();

export type PlasmicLoginModal__ArgsType = {};
type ArgPropType = keyof PlasmicLoginModal__ArgsType;
export const PlasmicLoginModal__ArgProps = new Array<ArgPropType>();

export type PlasmicLoginModal__OverridesType = {
  root?: Flex__<"div">;
  loginFormPopup?: Flex__<typeof LoginFormPopup>;
};

export interface DefaultLoginModalProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLoginModal__RenderFunc(props: {
  variants: PlasmicLoginModal__VariantsArgs;
  args: PlasmicLoginModal__ArgsType;
  overrides: PlasmicLoginModal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loginFormPopup.unblurPopUp",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "loginFormPopup.plasmicAntd5FormValue",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <LoginFormPopup
        data-plasmic-name={"loginFormPopup"}
        data-plasmic-override={overrides.loginFormPopup}
        className={classNames("__wab_instance", sty.loginFormPopup)}
        onPlasmicAntd5FormValueChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "loginFormPopup",
            "plasmicAntd5FormValue"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onUnblurPopUpChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "loginFormPopup",
            "unblurPopUp"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        plasmicAntd5FormValue={generateStateValueProp($state, [
          "loginFormPopup",
          "plasmicAntd5FormValue"
        ])}
        unblurPopUp={generateStateValueProp($state, [
          "loginFormPopup",
          "unblurPopUp"
        ])}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "loginFormPopup"],
  loginFormPopup: ["loginFormPopup"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  loginFormPopup: typeof LoginFormPopup;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginModal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginModal__VariantsArgs;
    args?: PlasmicLoginModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLoginModal__ArgProps,
          internalVariantPropNames: PlasmicLoginModal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoginModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginModal";
  } else {
    func.displayName = `PlasmicLoginModal.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginModal = Object.assign(
  // Top-level PlasmicLoginModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loginFormPopup: makeNodeComponent("loginFormPopup"),

    // Metadata about props expected for PlasmicLoginModal
    internalVariantProps: PlasmicLoginModal__VariantProps,
    internalArgProps: PlasmicLoginModal__ArgProps
  }
);

export default PlasmicLoginModal;
/* prettier-ignore-end */
