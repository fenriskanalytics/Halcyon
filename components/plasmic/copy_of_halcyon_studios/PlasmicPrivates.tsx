// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2p9VhVhxAWhB5Nusx9QUQ2
// Component: m6N0-lNs2LDy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Wrapper from "../../Wrapper"; // plasmic-import: z4Y-9l1_pr2Q/component
import Button from "../../Button"; // plasmic-import: EyzplKTGD_DF/component
import HalcyonNavBar from "../../HalcyonNavBar"; // plasmic-import: yxQmGgAy9hde/component
import PrivatesForm from "../../PrivatesForm"; // plasmic-import: TPQtu0_lm6_M/component
import HalcyonFooter2 from "../../HalcyonFooter2"; // plasmic-import: uHr0_ke6W-Dn/component
import HalcyonFooterBottom2 from "../../HalcyonFooterBottom2"; // plasmic-import: TO3DElMkZcRm/component

import { useScreenVariants as useScreenVariants_0QmF6MtAnaU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: _0qmF6MTAnaU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2p9VhVhxAWhB5Nusx9QUQ2/projectcss
import sty from "./PlasmicPrivates.module.css"; // plasmic-import: m6N0-lNs2LDy/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: j3whR53MQDz4/icon

createPlasmicElementProxy;

export type PlasmicPrivates__VariantMembers = {};
export type PlasmicPrivates__VariantsArgs = {};
type VariantPropType = keyof PlasmicPrivates__VariantsArgs;
export const PlasmicPrivates__VariantProps = new Array<VariantPropType>();

export type PlasmicPrivates__ArgsType = {};
type ArgPropType = keyof PlasmicPrivates__ArgsType;
export const PlasmicPrivates__ArgProps = new Array<ArgPropType>();

export type PlasmicPrivates__OverridesType = {
  root?: Flex__<"div">;
  wrapper?: Flex__<typeof Wrapper>;
  button?: Flex__<typeof Button>;
  halcyonNavBar?: Flex__<typeof HalcyonNavBar>;
  privatesForm?: Flex__<typeof PrivatesForm>;
  halcyonFooter2?: Flex__<typeof HalcyonFooter2>;
  halcyonFooterBottom2?: Flex__<typeof HalcyonFooterBottom2>;
};

export interface DefaultPrivatesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPrivates__RenderFunc(props: {
  variants: PlasmicPrivates__VariantsArgs;
  args: PlasmicPrivates__ArgsType;
  overrides: PlasmicPrivates__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0QmF6MtAnaU()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Wrapper
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__u9ZU)}
          >
            <section className={classNames(projectcss.all, sty.section__xdRr9)}>
              <div className={classNames(projectcss.all, sty.freeBox__mw7Q3)}>
                <div className={classNames(projectcss.all, sty.columns__i2PHg)}>
                  <div className={classNames(projectcss.all, sty.column__iaKQ)}>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ndKJx)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__jIeu
                        )}
                      >
                        <Trans__>
                          {hasVariant(globalVariants, "screen", "tablet")
                            ? "We started with humble beginnings"
                            : "Halcyon Studios"}
                        </Trans__>
                      </h1>
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__gmZrM
                        )}
                      >
                        <Trans__>
                          {"Where Tranquility Meets Exclusivity"}
                        </Trans__>
                      </h1>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kQpXc
                        )}
                      >
                        <Trans__>{"5 - 01 - 2022"}</Trans__>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns__swe6J
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__qi0TQ
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fbDec
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__grmgd
                              )}
                            >
                              <Trans__>{"32"}</Trans__>
                            </h2>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ecUa
                              )}
                            >
                              <Trans__>{"Days"}</Trans__>
                            </div>
                          </Stack__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___1RrIt
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qdoTl
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__ovNu
                              )}
                            >
                              <Trans__>{"22"}</Trans__>
                            </h2>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0OMu
                              )}
                            >
                              <Trans__>{"Hours"}</Trans__>
                            </div>
                          </Stack__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__pEvDd
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yCwRd
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__cjOeR
                              )}
                            >
                              <Trans__>{"16"}</Trans__>
                            </h2>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wurzJ
                              )}
                            >
                              <Trans__>{"Mintutes"}</Trans__>
                            </div>
                          </Stack__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__j6Mn
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iW7GP
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2___4XlR4
                              )}
                            >
                              <Trans__>{"32"}</Trans__>
                            </h2>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__s0QyH
                              )}
                            >
                              <Trans__>{"Sec"}</Trans__>
                            </div>
                          </Stack__>
                        </div>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___4Ji8M
                        )}
                      >
                        <Button
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          color={"unnamedVariant"}
                          endIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ffsGl
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <CheckSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___19Nl5
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fV4Zf
                            )}
                          >
                            <Trans__>{"Membership Request"}</Trans__>
                          </div>
                        </Button>
                      </div>
                    </Stack__>
                  </div>
                </div>
              </div>
            </section>
            <HalcyonNavBar
              data-plasmic-name={"halcyonNavBar"}
              data-plasmic-override={overrides.halcyonNavBar}
              className={classNames("__wab_instance", sty.halcyonNavBar)}
            />

            <section className={classNames(projectcss.all, sty.section__te6M9)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___1JK2Q)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__cy8Sc
                  )}
                >
                  <Trans__>
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Private Sessions \n& \nStudio Rentals"
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? "Private Sessions & Studio Rentals"
                      : "Private Sessions & Studio Rentasls"}
                  </Trans__>
                </h2>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ooGlR
                  )}
                >
                  <Trans__>
                    {
                      "Interested in Private Classes, Sessions, Photo Shoots, or Studio Rentals? Complete the form below to inquire about personalized experiences at Halcyon Studio. Whether you're looking for one-on-one instruction, a private group session, a professional photo shoot, or a serene space for your next event, we\u2019re here to accommodate your needs. Fill out the form, and we\u2019ll be in touch to create the perfect experience for you!"
                    }
                  </Trans__>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__szbSn)}>
                  <PrivatesForm
                    data-plasmic-name={"privatesForm"}
                    data-plasmic-override={overrides.privatesForm}
                    className={classNames("__wab_instance", sty.privatesForm)}
                  />
                </div>
              </Stack__>
              <HalcyonFooter2
                data-plasmic-name={"halcyonFooter2"}
                data-plasmic-override={overrides.halcyonFooter2}
                className={classNames("__wab_instance", sty.halcyonFooter2)}
              />

              <HalcyonFooterBottom2
                data-plasmic-name={"halcyonFooterBottom2"}
                data-plasmic-override={overrides.halcyonFooterBottom2}
                className={classNames(
                  "__wab_instance",
                  sty.halcyonFooterBottom2
                )}
              />
            </section>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "wrapper",
    "button",
    "halcyonNavBar",
    "privatesForm",
    "halcyonFooter2",
    "halcyonFooterBottom2"
  ],
  wrapper: ["wrapper"],
  button: ["button"],
  halcyonNavBar: ["halcyonNavBar"],
  privatesForm: ["privatesForm"],
  halcyonFooter2: ["halcyonFooter2"],
  halcyonFooterBottom2: ["halcyonFooterBottom2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  wrapper: typeof Wrapper;
  button: typeof Button;
  halcyonNavBar: typeof HalcyonNavBar;
  privatesForm: typeof PrivatesForm;
  halcyonFooter2: typeof HalcyonFooter2;
  halcyonFooterBottom2: typeof HalcyonFooterBottom2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPrivates__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPrivates__VariantsArgs;
    args?: PlasmicPrivates__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPrivates__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPrivates__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPrivates__ArgProps,
          internalVariantPropNames: PlasmicPrivates__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPrivates__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPrivates";
  } else {
    func.displayName = `PlasmicPrivates.${nodeName}`;
  }
  return func;
}

export const PlasmicPrivates = Object.assign(
  // Top-level PlasmicPrivates renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    button: makeNodeComponent("button"),
    halcyonNavBar: makeNodeComponent("halcyonNavBar"),
    privatesForm: makeNodeComponent("privatesForm"),
    halcyonFooter2: makeNodeComponent("halcyonFooter2"),
    halcyonFooterBottom2: makeNodeComponent("halcyonFooterBottom2"),

    // Metadata about props expected for PlasmicPrivates
    internalVariantProps: PlasmicPrivates__VariantProps,
    internalArgProps: PlasmicPrivates__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPrivates;
/* prettier-ignore-end */
